schema
  @server(port: 8000, graphiql: true, hostname: "0.0.0.0")
  @upstream(baseURL: "http://jsonplaceholder.typicode.com", httpCache: true) {
  query: Query
}

type Query {
  posts: [Post] @expr(body: {effect: {http: {path: "/posts"}}})
  user(id: Int!): User @expr(body: {effect: {http: {path: "/users/{{args.id}}"}}})

  getUserIdZero: User
    @expr(
      body: {
        if: {
          condition: {effect: {const: {data: true}}}
          then: {effect: {http: {path: "/users/0"}}}
          else: {effect: {http: {path: "/users/1"}}}
        }
      }
    )

  getUserIdOne: User
    @expr(
      body: {
        if: {
          condition: {effect: {const: {data: false}}}
          then: {effect: {http: {path: "/users/0"}}}
          else: {effect: {http: {path: "/users/1"}}}
        }
      }
    )

  # isMoreThanFive(input: Int!): [Post] @expr(body: {
  #   if: {
  #     condition: {
  #       gt: {
  #         left: {
  #           var: "args.input"
  #         },
  #         right: {
  #           literal: 5
  #         }
  #       }
  #     },
  #     then: { const: { data: true } },
  #     else: { const: { data: false } }
  #   }
  # })
}

type User {
  id: Int!
  name: String!
  username: String!
  email: String!
  phone: String
  website: String
}

type Post {
  id: Int!
  userId: Int!
  title: String!
  body: String!
  user: User @http(path: "/users/{{value.userId}}")
}
